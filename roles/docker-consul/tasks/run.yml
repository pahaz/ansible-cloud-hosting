
- name: retrieves and launches 'consul' image
  docker_container:
    image: '{{ docker_consul_image }}'
    ports:
      # Used by servers to handle incoming requests from other agents (TCP only).
      - '{{ docker_consul_host_ip }}:8300:8300'
      # Used to handle gossip in the LAN. Required by all agents (TCP and UDP).
      - '{{ docker_consul_host_ip }}:8301:8301'
      - '{{ docker_consul_host_ip }}:8301:8301/udp'
      # Used by servers to gossip over the WAN to other servers (TCP and UDP).
      - '{{ docker_consul_host_ip }}:8302:8302'
      - '{{ docker_consul_host_ip }}:8302:8302/udp'
      # Used by all agents to handle RPC from the CLI (TCP only).
      - '{{ docker_consul_host_ip }}:8400:8400'
      # Used by clients to talk to the HTTP/HTTPS API (TCP only).
      - '{{ docker_consul_host_ip }}:8500:8500'
      - '{{ docker_consul_host_ip }}:8543:8543'
      # Used to resolve DNS queries (TCP? and UDP).
      # {{ ansible_docker0.ipv4.address }}
      - '{{ docker_consul_dns_host_ip }}:53:8600/tcp'
      - '{{ docker_consul_dns_host_ip }}:53:8600/udp'
    volumes:
      # to support persistent storage
      - 'consul:/consul/data'
      # configuration file
      - '/etc/consul/config.json:/consul/config.json:ro'
      # ssl
      - '{{ docker_consul_tls_dir }}:/consul/ssl/'
    hostname: '{{ inventory_hostname }}'
    name: '{{ docker_consul_container_name }}'
    entrypoint:
      - '/bin/sh'
      - '-c'
      - 'consul agent -server -advertise={{ docker_consul_host_ip }} {% if docker_consul_join == docker_consul_host_ip %} -bootstrap-expect=3 {% else %} -retry-join={{ docker_consul_join }} {% endif %} -config-file=/consul/config.json -data-dir=/consul/data -log-level=debug'
    command:
      - ''
    env:
      # variables for consul
      SERVICE_8500_NAME: 'consul-api'
      SERVICE_53_NAME: 'consul-dns'
      SERVICE_TAGS: '{{ inventory_hostname }}'
    state: started
    # will be checked for a newer version of the image each time the task executes
    pull: yes
    # try to restart if the container exits
    restart_policy: always
    # it will try to restart 3 times before giving up
    restart_retries: 3
#    recreate: yes
