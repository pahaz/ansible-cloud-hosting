---
# See: http://docs.docker.com/articles/https/

- name: creates directories
  file:
    state: directory
    path: '{{ docker_swarm_manager_tls_dir }}'
    mode: 0400
    owner: root
  with_items:
    - '{{ docker_swarm_manager_tls_dir }}'


- name: uploads certifications
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    mode: 0400
    owner: root
  with_items:
    - { src: '{{ docker_swarm_manager_tls_local_ca_cert_file }}', dest: '{{ docker_swarm_manager_tls_ca_cert_file }}' }
    - { src: '{{ docker_swarm_manager_tls_local_ca_key_file }}', dest: '{{ docker_swarm_manager_tls_ca_key_file }}' }
  notify:
    # restart docker if certifications changes
    - 'restart swarm-manager'


- name: generates RSA private key
  command: 'openssl genrsa -out {{ docker_swarm_manager_tls_server_key_file }} 4096'
  args:
    chdir: '{{ docker_swarm_manager_tls_dir }}'
    creates: '{{ docker_swarm_manager_tls_server_key_file }}'
  notify:
    # restart docker if key changes
    - 'restart swarm-manager'


- name: creates certificate signing request
  command: 'openssl req -subj "/CN={{ inventory_hostname }}" -sha256 -new -key {{ docker_swarm_manager_tls_server_key_file }} -out {{ docker_swarm_manager_tls_dir }}/server.csr'
  args:
    chdir: '{{ docker_swarm_manager_tls_dir }}'
    creates: '{{ docker_swarm_manager_tls_dir }}/server.csr'


- name: uploads "extfile.cnf" configuration file
  template:
    src: 'extfile.cnf.j2'
    dest: '{{ docker_swarm_manager_tls_dir }}/server-extfile.cnf'


- name: generates certificate
  command: 'openssl x509 -req -days 365 -sha256 -in {{ docker_swarm_manager_tls_dir }}/server.csr -CA {{ docker_swarm_manager_tls_ca_cert_file }} -CAkey {{ docker_swarm_manager_tls_ca_key_file }} -CAcreateserial -out {{ docker_swarm_manager_tls_server_cert_file }} -extfile {{ docker_swarm_manager_tls_dir }}/server-extfile.cnf -passin "pass:{{ docker_swarm_manager_tls_local_certs_ca_password }}"'
  args:
    chdir: '{{ docker_swarm_manager_tls_dir }}'
    creates: '{{ docker_swarm_manager_tls_server_cert_file }}'
  notify:
    # restart docker if certificate changes
    - 'restart swarm-manager'


# See: http://docs.docker.com/articles/https/
# After generating cert.pem and server-cert.pem you can safely remove the two certificate signing requests:
# $ rm -v client.csr server.csr
# $ chmod -v 0400 ca-key.pem key.pem server-key.pem

# - name: remove server.csr
# TODO: THIS!